{"ast":null,"code":"var _jsxFileName = \"/Users/qiwei/Desktop/Desktop - Qiwei\\u2019s MacBook Pro M1/Job/AI Project/personal-website-1/frontend/src/components/GenerateText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './GenerateText.css'; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenerateText = () => {\n  _s();\n  const [generatedTexts, setGeneratedTexts] = useState({\n    'shakespeare-2000': '',\n    'shakespeare-4000': '',\n    'shakespeare-8000': '',\n    'peterson-2000': '',\n    'peterson-4000': '',\n    'peterson-8000': ''\n  });\n  const handleSubmit = async (e, model) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('https://api.chenqiwei.org/generate', {\n        model\n      });\n      console.log('Response from backend:', response.data);\n      if (response.data.error) {\n        console.error('Backend error:', response.data.error);\n        setGeneratedTexts(prev => ({\n          ...prev,\n          [model]: `Error: ${response.data.error}`\n        }));\n      } else {\n        setGeneratedTexts(prev => ({\n          ...prev,\n          [model]: response.data.generated_text\n        }));\n      }\n    } catch (error) {\n      console.error('Request error:', error);\n      setGeneratedTexts(prev => {\n        var _error$response, _error$response$data;\n        return {\n          ...prev,\n          [model]: `Error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message}`\n        };\n      });\n    }\n  };\n  const handleClear = model => {\n    setGeneratedTexts(prev => ({\n      ...prev,\n      [model]: ''\n    }));\n  };\n  const ModelBlock = ({\n    title,\n    model\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model-block\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => handleSubmit(e, model),\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: () => handleClear(model),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), generatedTexts[model] && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Generated Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: generatedTexts[model]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Shakespeare Text Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This model is trained on Shakespeare's text dataset.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models-grid\",\n        children: [/*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 2000 Iterations\",\n          model: \"out-shakespeare-char-2000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 4000 Iterations\",\n          model: \"out-shakespeare-char-4000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 8000 Iterations\",\n          model: \"out-shakespeare-char-8000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Jordan Peterson Text Generator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This model is trained on Jordan Peterson's lectures and writings.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"models-grid\",\n        children: [/*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 2000 Iterations\",\n          model: \"out-peterson-char-2000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 4000 Iterations\",\n          model: \"out-peterson-char-4000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModelBlock, {\n          title: \"Model with 8000 Iterations\",\n          model: \"out-peterson-char-8000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(GenerateText, \"sGQtHoJ6LIWNiJXzQDGJE8SzNnk=\");\n_c = GenerateText;\nexport default GenerateText;\nvar _c;\n$RefreshReg$(_c, \"GenerateText\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","GenerateText","_s","generatedTexts","setGeneratedTexts","handleSubmit","e","model","preventDefault","response","post","console","log","data","error","prev","generated_text","_error$response","_error$response$data","message","handleClear","ModelBlock","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onClick","_c","$RefreshReg$"],"sources":["/Users/qiwei/Desktop/Desktop - Qiweiâ€™s MacBook Pro M1/Job/AI Project/personal-website-1/frontend/src/components/GenerateText.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './GenerateText.css'; // Import the CSS file for styling\n\nconst GenerateText = () => {\n  const [generatedTexts, setGeneratedTexts] = useState({\n    'shakespeare-2000': '',\n    'shakespeare-4000': '',\n    'shakespeare-8000': '',\n    'peterson-2000': '',\n    'peterson-4000': '',\n    'peterson-8000': ''\n  });\n\n  const handleSubmit = async (e, model) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('https://api.chenqiwei.org/generate', { model });\n      console.log('Response from backend:', response.data);\n      \n      if (response.data.error) {\n        console.error('Backend error:', response.data.error);\n        setGeneratedTexts(prev => ({\n          ...prev,\n          [model]: `Error: ${response.data.error}`\n        }));\n      } else {\n        setGeneratedTexts(prev => ({\n          ...prev,\n          [model]: response.data.generated_text\n        }));\n      }\n    } catch (error) {\n      console.error('Request error:', error);\n      setGeneratedTexts(prev => ({\n        ...prev,\n        [model]: `Error: ${error.response?.data?.error || error.message}`\n      }));\n    }\n  };\n\n  const handleClear = (model) => {\n    setGeneratedTexts(prev => ({\n      ...prev,\n      [model]: ''\n    }));\n  };\n\n  const ModelBlock = ({ title, model }) => (\n    <div className=\"model-block\">\n      <h2>{title}</h2>\n      <form onSubmit={(e) => handleSubmit(e, model)}>\n        <button type=\"submit\">Generate</button>\n        <button type=\"button\" onClick={() => handleClear(model)}>Clear</button>\n      </form>\n      {generatedTexts[model] && (\n        <div className=\"output\">\n          <h3>Generated Text:</h3>\n          <p>{generatedTexts[model]}</p>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <div className=\"section\">\n        <h1>Shakespeare Text Generator</h1>\n        <p>This model is trained on Shakespeare's text dataset.</p>\n        <div className=\"models-grid\">\n          <ModelBlock \n            title=\"Model with 2000 Iterations\" \n            model=\"out-shakespeare-char-2000\" \n          />\n          <ModelBlock \n            title=\"Model with 4000 Iterations\" \n            model=\"out-shakespeare-char-4000\" \n          />\n          <ModelBlock \n            title=\"Model with 8000 Iterations\" \n            model=\"out-shakespeare-char-8000\" \n          />\n        </div>\n      </div>\n\n      <div className=\"section\">\n        <h1>Jordan Peterson Text Generator</h1>\n        <p>This model is trained on Jordan Peterson's lectures and writings.</p>\n        <div className=\"models-grid\">\n          <ModelBlock \n            title=\"Model with 2000 Iterations\" \n            model=\"out-peterson-char-2000\" \n          />\n          <ModelBlock \n            title=\"Model with 4000 Iterations\" \n            model=\"out-peterson-char-4000\" \n          />\n          <ModelBlock \n            title=\"Model with 8000 Iterations\" \n            model=\"out-peterson-char-8000\" \n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GenerateText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}